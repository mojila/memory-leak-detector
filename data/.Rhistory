library(ggplot)
df <- data.frame(dose=c("D0.5", "D1", "D2"),)
df <- data.frame(dose=c("D0.5", "D1", "D2"),len=c(4.2, 10, 29.5))
head(df)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
View(df)
View(df)
ggplot(data=df, aes(x=dose, y=len, group=1))+
geom_line()+
geom_point()
clear
q
View(df)
logs = read.csv2("minuteLogHeap2.csv", header = TRUE, sep = ",")
View(logs)
library(ggplot2)
ggplot(data=logs,aes(x=date,y=value, group=1)) +
geom_line()+
geom_point()
install.packages(c("boot", "foreign", "MASS", "nlme"))
ggplot(data=logs,aes(x=date,y=value, group=1)) +
geom_line() +
geom_point()
install.packages("forecast")
install.packages("fracdiff")
install.packages("tsoutliers")
data("hicp")
logs = read.csv2("minuteLogHeap2.csv", header = TRUE, sep = ",")
logs
y <- log(logs)
library(readxl)
amCharts <- read_excel("~/Downloads/amCharts.xlsx")
View(amCharts)
y <- log(hcip[["011600"]])
y <- log(10)
y
logs[0]
logs
logs[0]
logs[1]
logs.1
View(amCharts)
View(amCharts)
View(amCharts)
View(amCharts)
data(logs)
data
arima
logs
logs[1,]
source('~/Projects/memory-leak-detector/data/main.R')
ggplot(data=logs,aes(x=date,y=value, group=1)) +
geom_line() +
geom_point()
arima
logs
arima()
arima
mean(logs)
mean(logs.y)
mean(logs[,1])
logs[,1]
logs
View(logs)
View(logs)
ggplot(data=logs,aes(x=date,y=value, group=1)) +
geom_line() +
geom_point()
ggplot(data=logs,aes(x=date,y=value, group=1)) +
geom_line() +
geom_point()
ggplot(data=logs,aes(x=date,y=value, group=1)) +
geom_line() +
geom_point()
ggplot(data=logs,aes(x=date,y=value, group=1)) +
geom_line() +
geom_point()
View(logs)
View(logs)
View(logs)
library(ggplot2)
ggplot(data=logs, aes(x=date,y=value, group=1))
ggplot(data=logs, aes(x=date,y=value, group=1)) +
geom_line() +
geom_point()
install.packages("devtools")
devtools::install_github("twitter/AnomalyDetection")
devtools::install_github("twitter/AnomalyDetection")
data(logs)
logs
res = AnomalyDetectionTs(logs, max_anoms=0.02, direction='both', plot=TRUE)
library(AnomalyDetection)
data(logs)
res = AnomalyDetectionTs(logs, max_anoms=0.02, direction='both', plot=TRUE)
res = AnomalyDetectionTs(logs.y, max_anoms=0.02, direction='both', plot=TRUE)
res = AnomalyDetectionTs(logs[,2], max_anoms=0.02, direction='both', plot=TRUE)
logs[,2]
res = AnomalyDetectionTs(logs[,2], max_anoms=0.02, direction='both', plot=TRUE)
res = AnomalyDetectionTs(logs, max_anoms=0.02, direction='both', plot=TRUE)
load("/Users/mojila/Downloads/raw_data.rda")
data(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
res$plot
AnomalyDetectionVec(raw_data[,2], max_anoms=0.02, period=1440, direction='both', only_last=FALSE, plot=TRUE)
AnomalyDetectionVec(logs, max_anoms=0.02, period=1440, direction='both', only_last=FALSE, plot=TRUE)
data(logs)
View(raw_data)
View(raw_data)
View(raw_data[[1]][[1]])
install.packages("parsedate")
library(parsedate)
logs[1,1]
parse_iso_8601(logs[1,1])
parse_date(logs[1,1])
View(raw_data[[1]][[9]])
raw_data[1,]
mean(logs[,2])
mean(logs[,1])
mean(logs[,2])
logs[,2]
mean(logs[,2])
sd(logs[,2])
sd
logs.length
avg = mean(logs[,2])
std = sd(logs[,2])
avg
std
max = avg + 3 * std
min = avg - 3 * std
library(ggplot2)
logs = read.csv2("minuteLogHeap2.csv", header = TRUE, sep = ",")
ggplot(data=logs,aes(x=date,y=value, group=1)) +
geom_line() +
geom_point()
View(logs)
View(logs)
